---

- include_vars: roles/configuration/defaults/admin_users.yml
- include_vars: roles/configuration/defaults/cli_users.yml
- include_vars: roles/configuration/defaults/system_groups.yml
- include_vars: roles/configuration/defaults/service_accounts.yml
- include_vars: roles/configuration/defaults/cifs_creds.yml
- include_vars: roles/configuration/defaults/printers.yml
  
- name: "OS_CONFIG | Add Motd"
  template:
    src: motd.j2
    dest: /etc/motd
  when: not uninstall

- name: "OS_CONFIG | resolv.conf "
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
  when: not uninstall

- name: "OS_CONFIG | /etc/hosts "
  template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: 0644
    backup: yes
  when: not uninstall

- name: "OS_CONFIG | Preparing The DISK "
  parted:
    device: /dev/sdb
    number: 1
    flags: [lvm]
    state: present
  when: not uninstall

- name: "OS_CONFIG | Creating Volume Group"
  lvg:
    vg: data
    pvs: /dev/sdb1
    pesize: 32
  when: not uninstall

- name: "OS_CONFIG | Creating Volume Group"
  lvg:
    vg: data
    pvs: /dev/sdb1
    pesize: 32
  when: not uninstall
  
- name: "OS_CONFIG | Crteating volumes"
  lvol:
    vg: data
    lv: "{{ item.vol }}"
    size: "{{ item.size }}"
  with_items: "{{ data_partitions }}"
  ignore_errors: true
  when: not uninstall
  
- name: "OS_CONFIG | Crteating ext4"
  filesystem:
    dev: "/dev/data/{{ item.vol }}"
    fstype: ext4
  with_items: "{{ data_partitions }}"
  when: not uninstall
    
- name: "OS_CONFIG | Mounting ext4"
  mount:
    path: "{{ item.mount }}"
    src: "/dev/data/{{ item.vol }}"
    state: mounted
    fstype: ext4
    passno: 2
  with_items:  "{{ data_partitions }}"
  when: not uninstall

- name: "OS_CONFIG | Create Groups"
  group:
    name: "{{ item.groupname }}"
    state: present
  with_items: "{{ system_groups }}"
  when: not uninstall

- name: OS_CONFIG | Create Service Accounts
  user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.groups }}"
    password: "{{ item.password }}"
  with_items: "{{ service_accounts }}"
  when: not uninstall

- name: OS_CONFIG | Create Admin Accounts
  user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.groups }}"
    password: "{{ item.password }}"
    comment: "{{ item.comment }}"
  with_items: "{{ admin_users }}"
  when: not uninstall

- name: OS_CONFIG | Cteate User Acounts
  user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.groups }}"
    password: "{{ item.password }}"
    comment: "{{ item.comment }}"
  with_items: "{{ cli_users }}"
  when: not uninstall

- name: OS_CONFIG | Set Passwords to Expire
  command: '/usr/bin/chage -d 0 "{{ item.name }}"'
  with_items: "{{ cli_users }}"
  when: not uninstall

- name: OS_CONFIG | Add all public keys to authorized_keys
  authorized_key:
    user: "{{ item | basename | regex_replace('.id.rsa.pub','') }}"
    state: present
    key: "{{ lookup('file', '{{ item }}') }}"
  with_fileglob:
    - "files/ssh_keys/*.pub"
  when: not uninstall

- name: OS_CONFIG | Bootstrap Cfengine
  command: /var/cfengine/bin/cf-agent --bootstrap {{cf_engine_server_ip}}
  when: not uninstall

- name: OS_CONFIG | Install required cups package
  yum:
    name: cups
    enablerepo: "*jdi"
    state: latest

- name:  OS_CONFIG | Enable cups service
  service: name=cups state=started enabled=yes

- name:  OS_CONFIG | Copy PPD files
  copy:
    src: "{{ item }}"
    dest: "/usr/share/cups/model/{{ item | basename }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_fileglob:
    - "files/printers/*"

- name: OS_CONFIG | Installing Printers
  command: lpadmin -p {{ item.name }} -P /usr/share/cups/model/{{ item.driver }} -E -v lpd://{{ item.ipaddr }}
  with_items: "{{printers}}"

- name: OS_POWEROFF | Poweroff Linux System
  command: poweroff
  ignore_errors: true
  when: uninstall

- pause:
  seconds: 30
  when: uninstall


- name: OS_CONFIG | Create CIFS credentials file
  copy:
    dest: /root/creds.{{ CIFSServer }}
    content: "username={{ cifscreds[CIFSServer].username }}\npassword={{ cifscreds[CIFSServer].password }}\ndomain={{ CIFSServer }}\n"
    owner: root
    group: root
    mode: 0400

- name: Install required samba packages
  yum:
    name: samba-client, cifs-utils
    enablerepo: "*jdi"
    state: latest

- name: OS_CONFIG | Configure mounts
  mount:
    path: "/clisw/code/IMAGE/emails"
    src: "//{{ CIFSServer }}/CLI_Email"
    state: mounted
    fstype: cifs
    opts: '_netdev,rw,uid=progress,gid=cliadmin,dir_mode=0775,sec=ntlmssp,credentials=/root/creds.{{ CIFSServer }}'
    passno: 0

- name: Create /etc/adsm directory
  file:
    dest: /etc/adsm
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: Copy TSM.PWD
  template:
    src: TSM.PWD.j2
    dest: /etc/adsm/TSM.PWD
    owner: root
    group: root
    mode: 0600
  when: tsm_passwords[vm_name] is defined

- name: Get running dsmc process PID
  shell: "ps -ef | grep -v grep | grep 'dsmc schedule' | awk '{print $2}'"
  register: running_processes

- name: kill running dsmc process
  shell: "kill -6 {{ item }}"
  with_items: "{{ running_processes.stdout_lines }}"
  ignore_errors: yes
  register: killed_processes

- name: Force kill stuck processes
  shell: "kill -9 {{ item }}"
  with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  
- include_tasks: linux_ad.yml
 when: not uninstall
