---
- name: "OS_HARDENING | Enable necessary repos"
  yum_repository:
    name: "*"
    enablee: yes

# - name: "OS_HARDENING | Ensure kpatch is present"
#   yum:
#     name: kpatch
#     state: present
  
# - name: "OS_HARDENING | Check kpatch applied"
#   command: kpatch --list
#   changed_when: false
#   ignore_errors: true
  
- name: OS_HARDENING | Ensure yum-cron package is present
  yum:
    name: yum-cron
    state: present

- name: OS_HARDENING | enable yum-cron hourly security updates
  replace:
    dest: /etc/yum/yum-cron-hourly.conf
    regexp: "{{ item.re }}"
    replace: "{{ item.rep }}"
    backup: yes
  with_items:
    - { re: '^update_cmd = .*', rep: 'update_cmd = security' }
    - { re: '^update_messages = .*', rep: 'update_messages = yes' }
    - { re: '^download_updates = .*', rep: 'download_updates = yes' }
    - { re: '^apply_updates = .*', rep: 'apply_updates = yes' }

- name: OS_HARDENING | Ensure yum-cron service is enabled and started
  service:
    name: yum-cron
    enabled: yes
    state: started

- name: OS_HARDENING | Install Root Kit Hunter
  yum:
    name: rkhunter
    state: present

- name: OS_HARDENING | Initialize rootkithunter db
  command: "rkhunter --propupd creates=/var/lib/rkhunter/db/rkhunter.dat"

- name: OS_HARDENING | Password Policy
  lineinfile: 
    dest: /etc/login.defs
    regexp: "{{ item.r }}" 
    line: "{{ item.l }}"
    backup: yes
  with_items:
    - { r: '^PASS_MAX_DAYS', l: "PASS_MAX_DAYS   {{ PASS_MAX_DAYS }}" }
    - { r: '^PASS_MIN_DAYS', l: "PASS_MIN_DAYS    {{ PASS_MIN_DAYS }}" }
    - { r: '^PASS_MIN_LEN', l: "PASS_MIN_LEN    {{ PASS_MIN_LEN }}" }
    - { r: '^PASS_WARN_AGE', l: "PASS_WARN_AGE    {{ PASS_WARN_AGE }}" }
    - { r: '^UMASK', l: "UMASK     {{ UMASK }}" }
 
- name: OS_HARDENING | Account Policy
  lineinfile: 
    dest: /etc/default/useradd
    regexp: '^INACTIVE' 
    line: "INACTIVE {{INACTIVE_PERIOD}}"
    backup: yes
  
- name: OS_HARDENING | Password requirements
  lineinfile:
    dest: "/etc/pam.d/system-auth"
    state: present
    regexp: "^(password.*requisite.*pam_cracklib.so.*)$"
    line: "password\trequisite\tpam_cracklib.so try_first_pass minlength={{MIN_PASS_LENGTH}} lcredit={{MIN_PASS_LOWER_CHAR}} dcredit={{MIN_PASS_DIGIT_CHAR}} ocredit={{MIN_PASS_SPECIAL_CHAR}}"
    backup: yes

- name: OS_HARDENING | Password re-use policy
  lineinfile:
    dest: "/etc/pam.d/system-auth"
    state: present
    regexp: "^(password.*sufficient.*pam_unix.so.*authtok)$"
    line: '\1 remember={{LAST_UNIQUE_PASSWORDS}}'
    backrefs: yes

- name: OS_HARDENING | Password error policy
  lineinfile:
    dest: "/etc/pam.d/system-auth"
    state: present
    regexp: "^(auth.*required.*pam_tally.so)(.*)$"
    line: "auth\trequired\tpam_tally.so onerr={{LOGIN_FAIL_ERROR}} deny={{MAX_LOGIN_ATTEMPTS}} unlock_time={{ACCOUNT_UNLOCK_TIME}}"

- name: OS_HARDENING | Ensure iptables directory exists
  file: dest=/etc/iptables state=directory mode=0755

- name: OS_HARDENING | Iptables configuration file update
  template:
    src: rules.j2
    dest: /etc/iptables/rules.v4
    backup: yes
    owner: '0'
    group: '0'
    mode: '0644'

- name: OS_HARDENING | Ensure rules are correct
  shell: "iptables-restore -tv < /etc/iptables/rules.v4"


